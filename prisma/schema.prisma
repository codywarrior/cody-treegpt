generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  displayName  String?
  passwordHash String
  createdAt    DateTime @default(now())

  sessions      Session[]
  conversations Conversation[]

  @@map("users")
}

model Session {
  token     String   @id
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Conversation {
  id        String   @id @default(cuid())
  ownerId   String
  title     String
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner        User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  nodes        Node[]
  publicTokens PublicToken[]

  @@map("conversations")
}

model Node {
  id             String   @id @default(cuid())
  conversationId String
  parentId       String?
  role           NodeRole
  text           String
  deleted        Boolean  @default(false)
  createdAt      DateTime @default(now())

  conversation Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  parent       Node?         @relation("NodeParent", fields: [parentId], references: [id], onDelete: Cascade)
  children     Node[]        @relation("NodeParent")
  publicTokens PublicToken[]

  @@index([conversationId])
  @@index([parentId])
  @@map("nodes")
}

model PublicToken {
  token          String   @id
  conversationId String
  nodeId         String?
  createdAt      DateTime @default(now())
  expiresAt      DateTime

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  node         Node?        @relation(fields: [nodeId], references: [id], onDelete: Cascade)

  @@map("public_tokens")
}

enum NodeRole {
  user
  assistant
  system
}
